apiVersion: v1
kind: Pod
metadata:
  annotations:
    configchecksum: 74259a9021e4361975bf37012d0ea73752066c7a2cac7553f0f13c715a8010b
    kubernetes.io/limit-ranger: 'LimitRanger plugin set: cpu, memory request for init
      container configure-sysctl; cpu, memory limit for init container configure-sysctl'
    kubernetes.io/psp: base-logging
  creationTimestamp: "2019-12-23T13:30:34Z"
  generateName: efk-master-
  labels:
    app: efk-master
    chart: elasticsearch
    controller-revision-hash: efk-master-5468699649
    heritage: Tiller
    release: logging-elasticsearch-master
    statefulset.kubernetes.io/pod-name: efk-master-0
  name: efk-master-0
  namespace: logging
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: StatefulSet
    name: efk-master
    uid: 666cdd7b-efe4-11e9-942d-06c458c24d44
  resourceVersion: "89049244"
  selfLink: /api/v1/namespaces/logging/pods/efk-master-0
  uid: 65b8e19b-2588-11ea-a11e-0ab2df5af338
spec:
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - efk-master
          topologyKey: failure-domain.beta.kubernetes.io/zone
        weight: 1
  containers:
  - env:
    - name: node.name
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    - name: cluster.initial_master_nodes
      value: efk-master-0,efk-master-1,efk-master-2,
    - name: discovery.seed_hosts
      value: efk-master-headless
    - name: cluster.name
      value: efk
    - name: network.host
      value: 0.0.0.0
    - name: ES_JAVA_OPTS
      value: -Xmx4g -Xms4g
    - name: node.data
      value: "true"
    - name: node.ingest
      value: "true"
    - name: node.master
      value: "true"
    - name: ELASTIC_PASSWORD
      valueFrom:
        secretKeyRef:
          key: password
          name: elastic-credentials
    - name: ELASTIC_USERNAME
      valueFrom:
        secretKeyRef:
          key: username
          name: elastic-credentials
    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0
    imagePullPolicy: IfNotPresent
    name: elasticsearch
    ports:
    - containerPort: 9200
      name: http
      protocol: TCP
    - containerPort: 9300
      name: transport
      protocol: TCP
    readinessProbe:
      exec:
        command:
        - sh
        - -c
        - |
          #!/usr/bin/env bash -e
          # If the node is starting up wait for the cluster to be ready (request params: 'wait_for_status=green&timeout=1s' )
          # Once it has started only check that the node itself is responding
          START_FILE=/tmp/.es_start_file

          http () {
              local path="${1}"
              if [ -n "${ELASTIC_USERNAME}" ] && [ -n "${ELASTIC_PASSWORD}" ]; then
                BASIC_AUTH="-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"
              else
                BASIC_AUTH=''
              fi
              curl -XGET -s -k --fail ${BASIC_AUTH} https://127.0.0.1:9200${path}
          }

          if [ -f "${START_FILE}" ]; then
              echo 'Elasticsearch is already running, lets check the node is healthy'
              http "/"
          else
              echo 'Waiting for elasticsearch cluster to become cluster to be ready (request params: "wait_for_status=green&timeout=1s" )'
              if http "/_cluster/health?wait_for_status=green&timeout=1s" ; then
                  touch ${START_FILE}
                  exit 0
              else
                  echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                  exit 1
              fi
          fi
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 3
      timeoutSeconds: 5
    resources:
      limits:
        cpu: "2"
        memory: 6Gi
      requests:
        cpu: 250m
        memory: 4072Mi
    securityContext:
      capabilities:
        drop:
        - ALL
      runAsNonRoot: true
      runAsUser: 1000
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /usr/share/elasticsearch/data
      name: efk-master
    - mountPath: /usr/share/elasticsearch/config/certs
      name: elastic-certificates
    - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
      name: esconfig
      subPath: elasticsearch.yml
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-hjqxr
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  hostname: efk-master-0
  initContainers:
  - command:
    - sysctl
    - -w
    - vm.max_map_count=262144
    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0
    imagePullPolicy: IfNotPresent
    name: configure-sysctl
    resources:
      limits:
        cpu: 250m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
    securityContext:
      privileged: true
      runAsUser: 0
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-hjqxr
      readOnly: true
  nodeName: ip-172-29-111-145.eu-west-1.compute.internal
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
  serviceAccount: default
  serviceAccountName: default
  subdomain: efk-master-headless
  terminationGracePeriodSeconds: 120
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: efk-master
    persistentVolumeClaim:
      claimName: efk-master-efk-master-0
  - name: elastic-certificates
    secret:
      defaultMode: 420
      secretName: elastic-certificates
  - configMap:
      defaultMode: 420
      name: efk-master-config
    name: esconfig
  - name: default-token-hjqxr
    secret:
      defaultMode: 420
      secretName: default-token-hjqxr
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2019-12-23T13:34:31Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2019-12-23T13:40:11Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2019-12-23T13:40:11Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2019-12-23T13:33:10Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://113aaa269a8c53a214d407e02038a829e44926c5e011f99eab9c93edd900c7d2
    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0
    imageID: docker-pullable://docker.elastic.co/elasticsearch/elasticsearch@sha256:ccacb1463adc6daee970ed45e34cc46c14ba22116b64d5d4fac58044dfd61e8c
    lastState: {}
    name: elasticsearch
    ready: true
    restartCount: 0
    state:
      running:
        startedAt: "2019-12-23T13:34:31Z"
  hostIP: 172.29.111.145
  initContainerStatuses:
  - containerID: docker://b393374f6407c3638266fc70567be6d7315c4675073466b761ee68fcd22ec895
    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0
    imageID: docker-pullable://docker.elastic.co/elasticsearch/elasticsearch@sha256:ccacb1463adc6daee970ed45e34cc46c14ba22116b64d5d4fac58044dfd61e8c
    lastState: {}
    name: configure-sysctl
    ready: true
    restartCount: 0
    state:
      terminated:
        containerID: docker://b393374f6407c3638266fc70567be6d7315c4675073466b761ee68fcd22ec895
        exitCode: 0
        finishedAt: "2019-12-23T13:34:30Z"
        reason: Completed
        startedAt: "2019-12-23T13:34:30Z"
  phase: Running
  podIP: 100.97.128.8
  qosClass: Burstable
  startTime: "2019-12-23T13:33:10Z"
